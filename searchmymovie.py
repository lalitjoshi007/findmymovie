# -*- coding: utf-8 -*-
"""searchmymovie

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/192XCe4o6VsBgvx8gDa9bOR4Akdttma1U

SearchmyMovie
"""





import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

movies_data=pd.read_csv("/content/movies.csv")

movies_data.head()

#the no of rows and columns in my dataset
movies_data.shape

important_features=["genres","keywords","cast","director","overview"]
print(important_features)

#replacing null values with null string
for feature in important_features:
  movies_data[feature]=movies_data[feature].fillna("")

#combining all the important features
combined_features=movies_data["genres"]+' '+movies_data["keywords"]+' '+movies_data["cast"]+' '+movies_data["director"]+' '+movies_data["overview"]

print(combined_features)

#coverting the text data into feature vector
vectorizer=TfidfVectorizer()

feature_vectors=vectorizer.fit_transform(combined_features)

print(feature_vectors)

#cosine similarity score using cosine similarity
similarity=cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

#getting the movie name from the user
movie_name=str(input("Enter movie name:"))

# creating a list with all the movies name given in the dataset
list_of_all_titles=movies_data["title"].tolist()
if movie_name not in list_of_all_titles:
  print("not available")

print(list_of_all_titles)

#finding the close match for the movie name given by the user
find_close_match=difflib.get_close_matches(movie_name,list_of_all_titles)

print(find_close_match)

close_match=find_close_match[0]
print(close_match)

#find the index from the movie with title
index_movie=movies_data[movies_data.title==close_match]["index"].values[0]

print(index_movie)

#getting list of similar movies
similarity_score=list(enumerate(similarity[index_movie]))

print(similarity_score)

len(similarity_score)

#sorting the movies based on their similarity score
similar_movies=sorted(similarity_score,key=lambda x:x[1],reverse=True)
print(similar_movies)

# print the name of similar movies based on the index
print("suggested movies")
i=1
for movie in similar_movies:
  index=movie[0]
  title_from_index=movies_data[movies_data.index==index]["title"].values[0]
  if(i<10):
    print(i,".",title_from_index)
    i+=1

"""movie recommendetion system

"""

movie_name=str(input("Enter movie name:"))
list_of_all_titles=movies_data["title"].tolist()
find_close_match=difflib.get_close_matches(movie_name,list_of_all_titles)
close_match=find_close_match[0]
index_movie=movies_data[movies_data.title==close_match]["index"].values[0]
similarity_score=list(enumerate(similarity[index_movie]))
similar_movies=sorted(similarity_score,key=lambda x:x[1],reverse=True)
print("suggested movies")
i=1
for movie in similar_movies:
  index=movie[0]
  title_from_index=movies_data[movies_data.index==index]["title"].values[0]
  if(i<10):
    print(i,".",title_from_index)
    i+=1